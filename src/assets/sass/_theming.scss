@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'palettes';

@function get-color-from-palette($palette, $hue) {
  @if map.has-key($palette, $hue) {
    @return map.get($palette, $hue);
  }
  @error 'Hue "' + $hue + '" does not exist in palettes. Available hues are: ' + map.keys($palette);
}

@function get-contrast-color-from-palette($palette, $hue) {
  @return map.get(map.get($palette, contrast), $hue);
}

@function define-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
  $result: map.merge($base-palette, (
    default: get-color-from-palette($base-palette, $default),
    lighter: get-color-from-palette($base-palette, $lighter),
    darker: get-color-from-palette($base-palette, $darker),
    text: get-color-from-palette($base-palette, $text),
    default-contrast: get-contrast-color-from-palette($base-palette, $default),
    lighter-contrast: get-contrast-color-from-palette($base-palette, $lighter),
    darker-contrast: get-contrast-color-from-palette($base-palette, $darker)
  ));

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map.merge($result, (
      '#{$hue}-contrast': get-contrast-color-from-palette($base-palette, $hue)
    ));
  }

  @return $result;
}

// Validates the specified theme by ensuring that the optional color config defines
// a primary, accent and warn palettes. Returns the theme if no failures were found.
@function _mat-validate-theme($theme) {
  @if map.get($theme, color) {
    $color: map.get($theme, color);
    @if not map.get($color, primary) {
      @error 'Theme does not define a valid "primary" palettes.';
    }
    @else if not map.get($color, accent) {
      @error 'Theme does not define a valid "accent" palettes.';
    }
    @else if not map.get($color, warn) {
      @error 'Theme does not define a valid "warn" palettes.';
    }
  }
  @return $theme;
}

// Creates a light-themed color configuration from the specified
// primary, accent and warn palettes.
@function _mat-create-light-color-config($primary, $accent, $warn: null, $error: null) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: if($warn != null, $warn, define-palette(palettes.$orange-palette)),
    error: if($error != null, $error, define-palette(palettes.$red-palette)),
    is-dark: false,
    foreground: palettes.$light-theme-foreground-palette,
    background: palettes.$light-theme-background-palette,
  );
}

// Creates a dark-themed color configuration from the specified
// primary, accent and warn palettes.
@function _mat-create-dark-color-config($primary, $accent, $warn: null, $error: null) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: if($warn != null, $warn, define-palette(palettes.$orange-palette)),
    error: if($error != null, $error, define-palette(palettes.$red-palette)),
    is-dark: true,
    foreground: palettes.$dark-theme-foreground-palette,
    background: palettes.$dark-theme-background-palette,
  );
}

/// Creates a container object for a light theme to be given to individual component theme mixins.
/// @param {Map} $primary The theme configuration object.
/// @returns {Map} A complete Angular Material theme map.
@function define-light-theme($theme) {
  $result: $theme;
  @if map.get($theme, color) {
    $color-settings: map.get($result, color);
    $primary: map.get($color-settings, primary);
    $accent: map.get($color-settings, accent);
    $warn: map.get($color-settings, warn);
    $error: map.get($color-settings, error);
    $result: map.merge($result, (color: _mat-create-light-color-config($primary, $accent, $warn)));
  }
  @return $result;
}

/// Creates a container object for a dark theme to be given to individual component theme mixins.
/// @param {Map} $primary The theme configuration object.
/// @returns {Map} A complete Angular Material theme map.
@function define-dark-theme($theme) {
  $result: $theme;
  @if map.get($theme, color) {
    $color-settings: map.get($result, color);
    $primary: map.get($color-settings, primary);
    $accent: map.get($color-settings, accent);
    $warn: map.get($color-settings, warn);
    $error: map.get($color-settings, error);
    $result: map.merge($result, (color: _mat-create-dark-color-config($primary, $accent, $warn)));
  }
  @return $result;
}